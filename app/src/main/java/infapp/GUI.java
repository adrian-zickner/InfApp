/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package infapp;

import java.sql.SQLException;
import java.sql.ResultSet;

import javax.swing.DefaultListModel;
import javax.swing.JTextArea;
import javax.swing.event.ListSelectionEvent;

/**
 *
 * @author erik.fendrik
 */
public class GUI extends javax.swing.JFrame {

    DBVerbindung verbindung;
    private int id = 1;
    /**
     * Creates new form GUI
     */
    private DefaultListModel<String> model;

    public GUI() {
        try {
            this.verbindung = new DBVerbindung("localhost", "projekt", "root", "");
            this.verbindung.open();

        } catch (ClassNotFoundException | SQLException ex) {
            System.out.println("Verbindung fehlerhaft!");
            // TODO: handle exception
        }

        initComponents();
        model = new DefaultListModel<>();
        NotizListe.setModel(model);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        NotizFeld = new javax.swing.JTextArea();
        btnSpeichern = new javax.swing.JButton();
        btnLoeschen = new javax.swing.JButton();
        btnNeu = new javax.swing.JButton();
        NotizPanel = new javax.swing.JScrollPane();
        NotizListe = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        NotizListe.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                try {
                    NotizListeValueChanged(evt);
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                } catch (ClassNotFoundException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        });

        btnSpeichern.setText("Speichern");
        btnSpeichern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnSpeichernActionPerformed(evt);
                } catch (ClassNotFoundException | SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        });

        btnLoeschen.setText("Löschen");
        btnLoeschen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoeschenActionPerformed(evt);
            }
        });

        btnNeu.setText("Neu");
        btnNeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNeuActionPerformed(evt);
            }
        });
        NotizPanel.setViewportView(NotizListe);
        /*
         * NotizListe.setModel(new javax.swing.DefaultListModel<String>() {
         * String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
         * public int getSize() { return strings.length; }
         * public String getElementAt(int i) { return strings[i]; }
         * });
         * NotizPanel.setViewportView(NotizListe);
         */

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(btnSpeichern, javax.swing.GroupLayout.DEFAULT_SIZE, 120,
                                                Short.MAX_VALUE)
                                        .addComponent(NotizPanel))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(NotizFeld, javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.PREFERRED_SIZE, 409,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                                layout.createSequentialGroup()
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(btnLoeschen)
                                                        .addComponent(btnNeu)))
                                .addGap(21, 21, 21)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(NotizFeld, javax.swing.GroupLayout.DEFAULT_SIZE, 233,
                                                Short.MAX_VALUE)
                                        .addComponent(NotizPanel))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnLoeschen)
                                        .addComponent(btnSpeichern)
                                        .addComponent(btnNeu))
                                .addContainerGap(28, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>

    protected void NotizListeValueChanged(ListSelectionEvent evt) throws SQLException, ClassNotFoundException {
        verbindung.open();
        int selectedIndex = NotizListe.getSelectedIndex();

        if (selectedIndex != 1) {

            ResultSet resultSet = verbindung.fuehreAbfrageAus("SELECT * FROM notiz");
            try {
                while (resultSet.next()) {
                    id = resultSet.getInt("N_ID");
                    String inhalt = resultSet.getString("Inhalt");
                    NotizFeld.setText(inhalt);
                }
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            resultSet.close(); // Wichtig: ResultSet nach Gebrauch schließen
        }
    }

    private void NotizFeldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void btnLoeschenActionPerformed(java.awt.event.ActionEvent evt) {
        // Zugriff auf das aktuelle Modell der NotizListe

        // Überprüfen, ob ein Element ausgewählt ist
        int selectedIndex = NotizListe.getSelectedIndex();
        if (selectedIndex != -1) {
            // Element aus dem Modell entfernen
            model.remove(selectedIndex);
        }
    }

    private void btnSpeichernActionPerformed(java.awt.event.ActionEvent evt) throws ClassNotFoundException, SQLException {
        verbindung.open();

        String text = NotizFeld.getText();
        if (!text.isEmpty()) {
            saveNotiz(text, id);
        }
    }

    private void btnNeuActionPerformed(java.awt.event.ActionEvent evt) {

        // Hinzufügen einer neuen Notiz zur Liste
        String text = NotizFeld.getText();
        if (!text.isEmpty()) {
            model.addElement(text);
            NotizFeld.setText(""); // Textfeld nach dem Speichern leeren
            createNotiz(text);
        }

    }

    public void createNotiz(String titel) {

        String sql = "INSERT INTO notiz(Titel, Inhalt, Kategorie) VALUES (?, ?, ?)";
        try {
            verbindung.prepareAndExecuteStatement(sql, titel, "null", "null");
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Fehler bei Ezeugung!");
        } finally {
            try {
                verbindung.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

    }

    public void saveNotiz(String inhalt, int id) {

        String sql = "UPDATE notiz SET Inhalt = ? WHERE N_ID = ?;";
        try {
            verbindung.prepareAndExecuteStatement(sql, inhalt, id);
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Fehler bei Ezeugung!");
        } finally {
            try {
                verbindung.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    /*
     * private void getNotiz() {
     * String sql = "SELECT Titel FROM notiz";
     * try {
     * ResultSet resultSet = verbindung.executeQuery(sql);
     * while (resultSet.next()) {
     * String titel = resultSet.getString("Titel");
     * model.addElement(titel);
     * }
     * } catch (SQLException e) {
     * System.out.println("Fehler beim Laden der Titel aus der Datenbank!");
     * e.printStackTrace();
     * } finally {
     * try {
     * verbindung.close();
     * } catch (SQLException e) {
     * e.printStackTrace();
     * }
     * }
     * }
     */

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private JTextArea NotizFeld;
    private javax.swing.JList<String> NotizListe;
    private javax.swing.JScrollPane NotizPanel;
    private javax.swing.JButton btnLoeschen;
    private javax.swing.JButton btnSpeichern;
    private javax.swing.JButton btnNeu;
    // End of variables declaration
}